#!/usr/bin/env sh
# Mara Schulke, 20215853, 17.04.2023

help() { cat << EOF
rotate 1.0.0
Mara Schulke <mara.schulke@th-brandenburg.de>
A simple way of creating rotating backups

Usage:
    $0 [OPTIONS] [FILE]

Arguments:
    [FILE]
          File to backup

Options:
    -h
        Prints this help message
    -b <n=5>
        Defines the count of backups
    -d
        Removes all existing backups of the file
    -l 
        Lists all exiting backups of the file
    -z 
        Compresses newly created backups with gzip.
        Incompatible with -d and -l
EOF
}

BACKUP_COUNT=5
COMPRESS=false
COMMAND=backup

while getopts b:dlzh o; do
    case "${o}" in
        b)
            BACKUP_COUNT=${OPTARG}

            if ! echo "$BACKUP_COUNT" | grep -Eq '^[1-9]$'; then
                echo "Invalid argument for -b option: $BACKUP_COUNT" > /dev/stderr
                exit 1
            fi
            ;;
        d)
            COMMAND=delete
            ;;
        l)
            COMMAND=list
            ;;
        z)
            COMPRESS=true
            ;;
        h)
            help
            exit 0
            ;;
        *)
            help
            exit 1
            ;;
    esac
done

shift $((OPTIND-1))
FILE=$1

if [ $COMPRESS = "true" ] && [ $COMMAND != "backup" ]; then
    help
    exit 1
fi

backup() {
    if [ -z "$FILE" ]; then
        echo "Error: Missing the file argument to backup" > /dev/stderr
        help
        exit 1
    fi

    if [ ! -e "$FILE" ]; then
        echo "Error: file $FILE does not exist" > /dev/stderr
        exit 1
    fi

    if [ -z "$(cat "$FILE")" ]; then
        exit 0
    fi

    for i in $(seq $((BACKUP_COUNT - 1)) -1 1); do
        OLD_BACKUP="$FILE.$i"
        NEW_BACKUP="$FILE.$((i + 1))"

        if [ -e "$OLD_BACKUP" ]; then
            mv "$OLD_BACKUP" "$NEW_BACKUP"

            if [ -e "$NEW_BACKUP.gz" ]; then
                rm -f "$NEW_BACKUP.gz"
            fi
        fi

        if [ -e "$OLD_BACKUP.gz" ]; then
            mv "$OLD_BACKUP.gz" "$NEW_BACKUP.gz"

            if [ -e "$NEW_BACKUP" ]; then
                rm -f "$NEW_BACKUP"
            fi
        fi
    done

    if [ "$COMPRESS" = true ]; then
        gzip "$FILE" -c > "$FILE.1.gz"
        touch -r "$FILE" "$FILE.1.gz"
    else
        cp -p "$FILE" "$FILE.1"
    fi
}


delete() {
    rm -f "$FILE".[0-9]* "$FILE".[0-9]*.gz
    exit 0
}

list() {
    ls -l "$FILE".[0-9]* "$FILE".[0-9]*.gz 2>/dev/null
    exit 0
}

case "${COMMAND}" in
    backup)
        backup
        ;;
    delete)
        delete
        ;;
    list)
        list
        ;;
    *)
        help
        exit 1
        ;;
esac

exit 0

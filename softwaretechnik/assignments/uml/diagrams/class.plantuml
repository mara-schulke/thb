@startuml
WindowManager *--- Configuration
WindowManager ---- Backend

class WindowManager {
	- name: String
	+ start(): void
	+ kill(): void
	+ execute(Command command): void
}

class Configuration {
	- name: String
}

Configuration *--- EventHandler
EventHandler ---- Event

EventHandler ---- Command

interface EventHandler {
	+ handle(Event ev): Command
}

class KeyHandler implements EventHandler
class ClickHandler implements EventHandler
class DragHandler implements EventHandler

Configuration *--- Workspace

Workspace ---- Layout
Workspace ---- WindowStack

class Workspace {
	- name: String
}

Configuration o--- Layout

abstract class Layout {
	+ render(WindowStack winStack)
}

Command ---- Backend

abstract class Command

note right of Backend : Flowable kommt aus ReactiveX

Backend ---- Query
Backend ---- Event
Backend ---- Window

class Backend {
	+ connect(): void
	+ disconnect(): void
	+ getEventStream(): Flowable<Event>
}

class Window {
	- className: String
	- name: String
}

WindowStack *--- Window

class WindowStack {
	+ moveUp(Window window): void
	+ moveDown(Window window): void
	+ add(Window window): void
	+ delete(Window window): void
}

interface Event
class KeyEvent implements Event
class MouseEvent implements Event

enum Query {
	ClassName(String)
	Name(String)
	Position(Float, Float)
	ProcessCommand(String)

	{method} + matches(Window window): bool
}
@enduml

@startuml
WindowManager "1" ---- "1" Backend
WindowManager "1" *--- "1" Configuration

class WindowManager {
	- name: String
	+ start(): void
	+ kill(): void
	+ execute(Command command): void
}

Configuration "1" *--- "1..10" Workspace
Configuration "1" o--- "1..*" Layout

class Configuration {
	- name: String
}

Workspace "1" ---- "1..*" Layout
Workspace "1" ---- "1" WindowStack

class Workspace {
	- name: String
}

abstract class Layout {
	+ render(WindowStack winStack)
}

together {
	EventHandler ---- Event
	EventHandler "1..*" ---* "1" Configuration
	EventHandler "1" ---- "1" Command

	interface EventHandler {
		+ handle(Event ev): Command
	}

	note "Annotations zum\nfiltern der Events" as N1

	onKey   ---- EventHandler
	onDrag  ---- EventHandler
	onClick ---- EventHandler

	annotation onKey {
		- combination: char[]
	}

	annotation onClick {
		- mouseButton: char
	}

	annotation onDrag {
		- modKey: char
		- mouseButton: char
	}
}

note right of Backend : Flowable kommt aus ReactiveX\nMögliche Implementierung könnte bspw. X11 sein

abstract class Backend {
	+ connect(): void
	+ disconnect(): void
	+ getEventStream(): Flowable<Event>
}

Backend ---- Query
Backend "1" ---- "0..*" Event
Backend "1" ---- "0..*" Window

class Window {
	- className: String
	- command: String
	- name: String
	- zIndex: int
	+ close(): void
	+ focus(): void
}

Command "1..*" ---- "1" Backend

abstract class Command {
	- name: String
	+ execute(): void
}

WindowStack "1" *--- "1" Window

class WindowStack {
	- id: String
	+ moveUp(Window window): void
	+ moveDown(Window window): void
	+ add(Window window): void
	+ delete(Window window): void
}

enum Event {
	MAP(String windowId)
	UNMAP(String windowId)
	..
	KEYDOWN(char[] keys)
	MOUSEDOWN(char[] buttons)
	--
	{method} + forwardToWindow(): void
}

enum Query {
	ClassName(String)
	Name(String)
	Position(Float, Float)
	ProcessCommand(String)
	--
	{method} + matches(Window window): bool
}
@enduml
